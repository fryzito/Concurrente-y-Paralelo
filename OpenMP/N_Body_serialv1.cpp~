#include <bits/stdc++.h>
#define dbg(x) cout <<#x<<"="<<x<<endl
#define dbg3(x,y,z) cout <<#x<<"="<<x<<" "<<#y<<"="<<y<<" "<<#z<<"="<<z<<endl
#define G 6.673 * 1e-11
#define X 0
#define Y 1
using namespace std;
void generarDatosDeEntrada(int num_cuerpos,int masses[],int pos[][2]){
  for(int i=0;i<num_cuerpos;i++){
    masses[i] = rand()%100;
    pos[i][X] = rand()%100;
    pos[i][Y] = rand()%100;
  }
  return;
}
int main(){
  int num_cuerpos = 100;
  int masses[num_cuerpos];
  int pos[num_cuerpos][2];
  double forces[num_cuerpos][2];
  // Get input data;
  generarDatosDeEntrada(num_cuerpos,masses,pos);
  memset(forces,0,sizeof forces);
  // for each timestep {
  //     if (timestep output) Print positions and velocities of
  // 			     particles;
  //     for each particle q
  for(int q=0;q<num_cuerpos;q++){
    //for each particle k != q
    for(int k=0;k<num_cuerpos;k++){
      //Compute total force on q;
      if(q==k) continue;
      int x_diff = pos[q][X] - pos[k][X]; // ojo ver si funciona int
      int y_diff = pos[q][Y] - pos[k][Y]; //
      double dist = sqrt(x_diff * x_diff + y_diff * y_diff);
      double dist_cubed = dist*dist*dist;
      forces[q][X] -= G*masses[q]*masses[k]/dist_cubed * x_diff;
      forces[q][Y] -= G*masses[q]*masses[k]/dist_cubed * y_diff;
    }
  }

  //     for each particle q
  // 		 Compute position and velocity of q;
  //   }
  // Print positions and velocities of particles;
  
  
  return 0;
}
